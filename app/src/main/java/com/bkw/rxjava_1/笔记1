一、观察者模式
1、（被观察者）起点 和 终点（观察者），一旦满足 起点和重点这样的需求，都可以使用RxJava来实现。

2、自定义的标准观察者设计模式，一个被观察者  ---- 多个观察者。

3、RxJava是改装的观察者设计模式，一个被观察者对应一个观察者。


---------------------------------------------------------------------
二、上游和下游
表示一个事件的流向，如：河流，顺流发生与处理。

上游                            下游              下游
1、发起事件(客人点菜)---》（服务员）处理事件1---》处理事件2（菜单）交于后厨处理。

2、ObservableEmitter<Integer> 事件发送器

API方法介绍：

Observable.create()
创建一个被观察者。

Observable.subscribe(new Observer)
订阅观察者。

onSubscribe()  方法详解：
被观察者一旦订阅观察者，就会调用的方法。

onNext() 方法：
被观察者发送事件。
观察者接收事件。

onError() 方法：
发送错误时。

onComplete() 方法：
被观察者调用表示发送事件完毕。
观察者调用表示接收事件完成。

---------------------------------------------------------------------
三、创建型操作符
观察者：完整版观察者new Observer ,简化版 new Consumer。

以下操作符目的都是创建一个Observable：
create() :  使用者自己发送事件，下游，接收事件，

just() ：内部发送事件，单一对象。

formArray()： 内部自己发送事件，可多个对象，类似可处理for循环遍历操作。

empty()： 内部自己发送，下游默认是Object,无法发出有值事件，只会调用onComplete()。

range(): 内部自己发送，start 1 累加， count（次数）5 最后结果：1 2 3 4 5


------------------------------------------------------------
四、RxJava变换型操作符。
上游----》 变换操作 (流向时变换)---------》下游
线性发送事件，在过程中对事件进行额外操作，下游接收最后的结果。

map(new Funcation):  数据类型转换，如：将Integer转为String类型

flatMap()作用：
将被观察者发送的事件序列进行 拆分 & 单独转换，再合并成一个新的事件序列，最后再进行发送。
应用场景：无序的将被观察者发送的整个事件序列进行变换

concatMap()作用：
类似FlatMap（）操作符。
应用场景：有序的将被观察者发送的整个事件序列进行变换。

groupBy() :
分组变换操作符。


buffer() 作用:
定期从 被观察者（Obervable）需要发送的事件中 获取一定数量的事件 & 放到缓存区中，最终发送。

---------------------------------------------------------------------
五、过滤操作符
filter() ：
过滤 特定条件的事件。
  Observable.just("东风", "西南", "小北")

                //过滤操作符
                .filter(new Predicate<String>() {
                    @Override
                    public boolean test(String s) throws Exception {
                        //return false 全部都不会发送，return true全部发送
                        return s.equals("东风");
                    }
                })

                .subscribe(new Consumer<String>() {
                    @Override
                    public void accept(String s) throws Exception {
                        //只接收符合条件的
                        Log.e(TAG, "过滤后得到的事件是: " + s);
                    }
                });

ofType()：
 过滤特定数据类型的数据。
      Observable.just("cy",1,2.1,"里")
                .ofType(Integer.class) //筛选出整数类型
                .subscribe(new Consumer<Integer>() {
                    @Override
                    public void accept(Integer integer) throws Exception {
                        Log.e(TAG, "获取到的整型事件元素是："+integer );
                    }
                });


skip()/skipLast():
作用:跳过某个事件
      // 使用1：根据顺序跳过数据项
        Observable.just(1, 2, 3, 4, 5)
                .skip(1) // 跳过正序的前1项
                .skipLast(2) // 跳过正序的后2项
                .subscribe(new Consumer<Integer>() {
                    @Override
                    public void accept(Integer integer) throws Exception {
                        Log.d(TAG, "获取到的整型事件元素是： " + integer);
                    }
                });

// 使用2：根据时间跳过数据项
        // 发送事件特点：发送数据0-5，每隔1s发送一次，每次递增1；第1次发送延迟0s
        Observable.intervalRange(0, 5, 0, 1, TimeUnit.SECONDS)
                .skip(1, TimeUnit.SECONDS) // 跳过第1s发送的数据
                .skipLast(1, TimeUnit.SECONDS) // 跳过最后1s发送的数据
                .subscribe(new Consumer<Long>() {

                    @Override
                    public void accept(Long along) throws Exception {
                        Log.d(TAG, "获取到的整型事件元素是： " + along);
                    }
                });


distinct() / distinctUntilChanged():
过滤事件序列中重复的事件/连续重复的事件。
// 使用1：过滤事件序列中重复的事件
        Observable.just(1, 2, 3, 1 , 2 )
                .distinct()
                .subscribe(new Consumer<Integer>() {
                      @Override
                      public void accept( Integer integer) throws Exception {
                          Log.d(TAG,"不重复的整型事件元素是： "+ integer);
                      }
        });

        // 使用2：过滤事件序列中 连续重复的事件
        // 下面序列中，连续重复的事件 = 3、4
        Observable.just(1,2,3,1,2,3,3,4,4 )
                .distinctUntilChanged()
                .subscribe(new Consumer<Integer>() {
                    @Override
                    public void accept( Integer integer) throws Exception {
                        Log.d(TAG,"不连续重复的整型事件元素是： "+ integer);
                    }
                });

---------------------------------------------------------------------
5.2 根据 指定事件数量 过滤事件
take()
指定观察者最多能接收到的事件数量。

takeLast()
指定观察者只能接收到被观察者发送的最后几个事件。

---------------------------------------------------------------------
5.3 根据 指定时间 过滤事件
需求场景：通过设置指定的时间，仅发送在该时间内的事件。

对应操作符：
throttleFirst() 在某段时间内，只发送该段时间内第1次事件 。
需求场景：可用来做功能防抖，如某个按钮的点击事件。
让View支持RxJava，需要使用RxBinding才能对View进行监听。

throttleLast() 在某段时间内，只发送该段时间内最后1次事件。

sample() 在某段时间内，只发送该段时间内最新（最后）1次事件。

throttleWithTimeout()/debounce()
发送数据事件时，若2次发送事件的间隔＜指定时间，就会丢弃前一次的数据，
直到指定时间内都没有新数据发射时才会发送后一次的数据。

debounce() 应用场景：联想搜索优化
// 控件绑定
        EditText ed;
        TextView tv;
        ed = (EditText) findViewById(R.id.ed);
        tv = (TextView) findViewById(R.id.tv);

         /*
         * 说明
         * 1. 此处采用了RxBinding：RxTextView.textChanges(name) = 对对控件数据变更进行监听（功能类似TextWatcher），需要引入依赖：compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
         * 2. 传入EditText控件，输入字符时都会发送数据事件（此处不会马上发送，因为使用了debounce（））
         * 3. 采用skip(1)原因：跳过 第1次请求 = 初始输入框的空字符状态
         **/
        RxTextView.textChanges(ed)
                .debounce(1, TimeUnit.SECONDS).skip(1)
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Observer<CharSequence>() {
                    @Override
                    public void onSubscribe(Disposable d) {

                    }
                    @Override
                    public void onNext(CharSequence charSequence) {
                        tv.setText("发送给服务器的字符 = " + charSequence.toString());
                    }

                    @Override
                    public void onError(Throwable e) {
                        Log.d(TAG, "对Error事件作出响应" );

                    }

                    @Override
                    public void onComplete() {
                        Log.d(TAG, "对Complete事件作出响应");
                    }
                });

---------------------------------------------------------------------
5.4 根据 指定事件位置 过滤事件
需求场景：通过设置指定的位置，过滤在该位置的事件。

对应操作符：
firstElement() 仅选取第一个元素。

lastElement() 仅选取最后一个元素。

elementAt() 指定接收某个元素（通过 索引值 确定）。

elementAtOrError() 在elementAt（）的基础上，当出现越界情况（即获取的位置索引 ＞ 发送事件序列长度）时，即抛出异常。

---------------------------------------------------------------------
六、条件操作符
all() 作用：判断发送的每项数据是否都满足 设置的函数条件。
满足返回true,不满足则false。

takeWhile() 作用：判断发送的每项数据是否满足 设置函数条件。
若发送的数据满足该条件，则发送该项数据；否则不发送。

skipWhile() 作用：判断发送的每项数据是否满足 设置函数条件。
直到该判断条件 = false时，才开始发送Observable的数据

takeUntil() 作用：执行到某个条件时，停止发送事件。

skipUntil() 作用：等到 skipUntil传入的Observable开始发送数据，（原始）第1个Observable的数据才开始发送数据。

SequenceEqual() 作用：判定两个Observables需要发送的数据是否相同。
若相同，返回 true；否则，返回 false。

contains() 作用：判断发送的数据中是否包含指定数据。
若包含，返回 true；否则，返回 false
内部实现 = exists（）。

isEmpty() 作用：判断发送的数据是否为空。
若为空，返回 true；否则，返回 false。

amb() 作用：当需要发送多个 Observable时，只发送 先发送数据的Observable的数据，而其余 Observable则被丢弃。

defaultIfEmpty()作用：在不发送任何有效事件（ Next事件）、仅发送了 Complete 事件的前提下，发送一个默认值。


---------------------------------------------------------------------
七、合并、组合操作符
组合 多个被观察者（Observable） & 合并需要发送的事件。
应用场景：
1.组合多个被观察者
2.合并多个事件
3.发送事件前追加发送事件
4.统计发送事件数量

实际开发需求案例：
1.从缓存（磁盘、内存）中获取缓存数据。
2.合并数据源
3.联合判断


concat()/concatArray()作用：组合多个被观察者一起发送数据，合并后按顺序串行执行。
二者区别：concat()组合被观察者的数量<=4个，concatArray()则可>4个。

merge()/mergeArray()作用：组合多个被观察者一起发送数据，合并后按时间线并行执行。
二者区别：组合被观察者的数量，merge()组合被观察者数量<=4个，而mergeArray()则可>4个。

concatDelayError()/mergeDelayError() 作用：
背景：使用concat和merge操作符时。
冲突：若其中1个被观察者发出onError事件，则会马上终止其他被观察者继续发送事件。
解决方案：若希望onError事件推迟到其他被观察者发送事件结束后才触发。
即需要使用对应的concarDelayError()或mergeDelayError()操作符。

Zip()作用：合并多个事件
合并多个被观察者发送的事件，生成一个新的事件序列（即组合过后的时间序列），并最终发送。
特别注意：
1.件组合方式 = 严格按照原先事件序列 进行对位合并
如：被观察者1的事件序列（事件1,2,3）与被观察者2（事件a,b,c）的事件序列合并后，
变成了被观察者1（事件1a,2b,3c）。
2.最终合并的事件数量 = 多个被观察者（Observable）中数量最少的数量
如两个被观察者的事件数量不同，则多出的事件数量将被抛弃，不再发送。

总结：
定义：属于RxJava2中的组合、合并操作符。
作用：1.合并多个被观察者发送的事件；2.生成一个新的事件序列，并发送。
原理：
1.事件组合方式=严格按照原先事件序列进行对位合并；
2.最终合并的时间数量=多个观察者（Observable）中数量最少的数量。

应用场景：
当需要展示的信息要从多个地方获取，即（信息=信息1+信息2）&统一结合后再展示。
如合并网络请求的发送&统一显示结果-结合Retrofit+RxJava。


conbineLatest() 作用：
当两个Observables中的任何一个发送了数据后，将先发送了数据的Observable的最新(最后)一个数据
与另一个Observable发送的每个数据结合，最终基于该函数的结果发送数据。

与zip的区别：
Zip() = 按个数合并，即1对1合并；CombineLatest() = 按时间合并，即在同一个时间点上合并。

combineLatestDelayError()作用：
作用类似于concatDelayError() / mergeDelayError() ，即错误处理。

reduce() 作用：
把被观察者需要发送的事件聚合成1个事件 & 发送。
聚合的逻辑根据需求撰写，但本质都是前2个数据聚合，然后与后1个数据继续进行聚合，依次类推。

collect() 作用：
将被观察者Observable发送的数据事件收集到一个数据结构里。


startWith()/startWithArray() 作用：
在一个被观察者发送事件前，追加发送一些数据 或一个新的被观察者。
追加单个数据=startWith();
追加多个数据=startWithArray();

count()作用：统计被观察者发送事件的数量















































